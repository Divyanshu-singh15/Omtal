// File: src/components/common/Button.jsx
import { Link } from 'react-router-dom';

const Button = ({ 
  children, 
  variant = 'primary', 
  size = 'md', 
  href, 
  onClick, 
  type = 'button',
  className = '',
  disabled = false,
  ...props 
}) => {
  // Define variant classes
  const variantClasses = {
    primary: 'bg-primary text-white hover:bg-primary-dark',
    secondary: 'bg-secondary text-white hover:bg-secondary-dark',
    outline: 'bg-transparent border border-primary text-primary hover:bg-primary hover:text-white',
    white: 'bg-white text-primary hover:bg-neutral-100',
    accent: 'bg-accent text-secondary-dark hover:bg-accent-dark',
    ghost: 'bg-transparent text-gray-800 hover:bg-neutral-100',
  };

  // Define size classes
  const sizeClasses = {
    sm: 'px-4 py-2 text-sm',
    md: 'px-6 py-3',
    lg: 'px-8 py-4 text-lg',
    full: 'w-full py-3',
  };

  // Combine classes
  const buttonClasses = `
    ${variantClasses[variant]} 
    ${sizeClasses[size]} 
    font-medium rounded transition-colors duration-200
    focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary
    ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
    ${className}
  `;

  // Render as link if href is provided, otherwise as button
  if (href) {
    return (
      <Link 
        to={href} 
        className={buttonClasses}
        {...props}
      >
        {children}
      </Link>
    );
  }

  return (
    <button
      type={type}
      className={buttonClasses}
      onClick={onClick}
      disabled={disabled}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;

// File: src/components/common/Logo.jsx
import { Link } from 'react-router-dom';

const Logo = ({ color = 'dark' }) => {
  return (
    <Link to="/" className="flex items-center">
      <span className={`font-heading text-2xl font-bold ${color === 'light' ? 'text-white' : 'text-gray-800'}`}>
        Luxury
        <span className="text-primary">Hotel</span>
      </span>
    </Link>
  );
};

export default Logo;

// File: src/components/common/Card.jsx
const Card = ({ 
  title, 
  subtitle, 
  image, 
  children, 
  className = '', 
  imageClassName = '',
  contentClassName = '',
  onClick
}) => {
  return (
    <div 
      className={`bg-white rounded-lg shadow-md overflow-hidden ${onClick ? 'cursor-pointer' : ''} ${className}`}
      onClick={onClick}
    >
      {image && (
        <div className={`overflow-hidden ${imageClassName}`}>
          <img 
            src={image} 
            alt={title} 
            className="w-full h-full object-cover transition-transform duration-500 hover:scale-105" 
          />
        </div>
      )}
      <div className={`p-6 ${contentClassName}`}>
        {title && <h3 className="font-heading text-xl mb-2">{title}</h3>}
        {subtitle && <p className="text-neutral-600 mb-4">{subtitle}</p>}
        {children}
      </div>
    </div>
  );
};

export default Card;

// File: src/components/common/Carousel.jsx
import { useState, useEffect, useRef } from 'react';

const Carousel = ({ 
  slides, 
  autoPlay = true, 
  interval = 5000, 
  showArrows = true,
  showDots = true,
  className = '',
}) => {
  const [currentSlide, setCurrentSlide] = useState(0);
  const timeoutRef = useRef(null);

  const resetTimeout = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
  };

  useEffect(() => {
    resetTimeout();
    
    if (autoPlay) {
      timeoutRef.current = setTimeout(() => {
        setCurrentSlide((prevSlide) => 
          prevSlide === slides.length - 1 ? 0 : prevSlide + 1
        );
      }, interval);
    }
    
    return () => {
      resetTimeout();
    };
  }, [currentSlide, autoPlay, interval, slides.length]);

  const goToSlide = (index) => {
    setCurrentSlide(index);
  };

  const goToPreviousSlide = () => {
    setCurrentSlide((prevSlide) => 
      prevSlide === 0 ? slides.length - 1 : prevSlide - 1
    );
  };

  const goToNextSlide = () => {
    setCurrentSlide((prevSlide) => 
      prevSlide === slides.length - 1 ? 0 : prevSlide + 1
    );
  };

  return (
    <div className={`relative overflow-hidden ${className}`}>
      <div 
        className="whitespace-nowrap transition-transform duration-500 ease-out"
        style={{ transform: `translateX(-${currentSlide * 100}%)` }}
      >
        {slides.map((slide, index) => (
          <div 
            key={index} 
            className="inline-block w-full whitespace-normal"
          >
            {slide}
          </div>
        ))}
      </div>
      
      {showArrows && (
        <>
          <button 
            onClick={goToPreviousSlide} 
            className="absolute left-4 top-1/2 -translate-y-1/2 bg-white/80 rounded-full p-2 z-10 hover:bg-white transition-colors duration-200"
            aria-label="Previous slide"
          >
            ←
          </button>
          <button 
            onClick={goToNextSlide} 
            className="absolute right-4 top-1/2 -translate-y-1/2 bg-white/80 rounded-full p-2 z-10 hover:bg-white transition-colors duration-200"
            aria-label="Next slide"
          >
            →
          </button>
        </>
      )}
      
      {showDots && (
        <div className="absolute bottom-4 left-0 right-0 flex justify-center space-x-2">
          {slides.map((_, index) => (
            <button
              key={index}
              onClick={() => goToSlide(index)}
              className={`w-3 h-3 rounded-full ${
                currentSlide === index 
                  ? 'bg-primary' 
                  : 'bg-white/50 hover:bg-white/80'
              } transition-colors duration-200`}
              aria-label={`Go to slide ${index + 1}`}
            />
          ))}
        </div>
      )}
    </div>
  );
};

export default Carousel;

// File: src/components/common/Section.jsx
const Section = ({ 
  children, 
  className = '', 
  bgColor = 'bg-white',
  title,
  subtitle,
  centered = false,
  spacing = 'py-16 md:py-24',
}) => {
  return (
    <section className={`${bgColor} ${spacing} ${className}`}>
      <div className="container">
        {(title || subtitle) && (
          <div className={`mb-12 ${centered ? 'text-center' : ''}`}>
            {title && (
              <h2 className="font-heading text-3xl md:text-4xl font-bold mb-4">
                {title}
              </h2>
            )}
            {subtitle && (
              <p className="text-neutral-600 text-lg max-w-2xl mx-auto">
                {subtitle}
              </p>
            )}
          </div>
        )}
        {children}
      </div>
    </section>
  );
};

export default Section;
